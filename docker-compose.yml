version: '3'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    restart: on-failure:5
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck: 
      test: nc -z localhost 9092 || exit
      interval: 10s
      timeout: 5s
      retries: 15

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - 8080:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: kafka-container
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092

  mage:
    image: mageai/mageai:latest
    container_name: magic
    command: mage start magic
    env_file:
      - .env
    environment:
      ENV: dev
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: postgres #
      # ${POSTGRES_HOST}
      PG_HOST_PORT: ${PG_HOST_PORT}
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - 6789:6789
    volumes:
      - .:/home/src/
    restart: on-failure:5

  postgres:
    image: postgres:latest
    container_name: postgres
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./db:/var/lib/postgresql/data
      - ./starting_scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"

  minio:
    image: minio/minio
    env_file:
      - .env
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - ./minio_data:/minio_data

    command: ["server", "--console-address", ":9001", "/data"]
  
  jupyter-mlflow:
    build: .
    env_file:
      - .env
    container_name: jupyter-mlflow
    ports:
      - "8888:8888"  # Port for Jupyter Lab
      - "5001:5001"  # Port for MLflow UI
    environment:
      - MLFLOW_TRACKING_URI=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${PG_HOST_PORT}/${MLFLOW_DB}
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/mlflow-artifacts
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000  # If using Minio for artifact storage
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}  # Replace with your access key if using Minio or S3
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}  # Replace with your secret key    
    volumes:
      - .:/usr/src/app
      - ./mlflow:/mlflow-artifacts
      - ./notebooks:/notebooks
    depends_on:
      - postgres
      - minio

volumes:
  zookeeper-data: {}
  kafka-data: {}
  db: {}
  minio_data: {}